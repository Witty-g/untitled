namespace myTiles {
    //% blockIdentity=images._tile
    export const tile0 = img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`
}
function start_level () {
    scene.setBackgroundColor(Math.randomRange(3, 7))
    Count = 0
    for (let index = 0; index <= 10 + Level; index++) {
        AnimalsHeart = sprites.create(img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . 2 . . . . . 
. . . . . 2 2 2 . 2 8 2 2 . . . 
. . . . 2 8 8 2 . 2 8 8 2 . . . 
. . . 2 2 8 8 8 2 8 8 8 2 . . . 
. . . 2 8 8 5 8 2 8 8 8 2 . . . 
. . . 2 2 8 8 8 8 8 8 8 2 . . . 
. . . . 2 8 8 8 8 8 8 8 2 . . . 
. . . . 2 8 5 8 8 8 5 8 2 . . . 
. . . . . 2 8 8 8 8 8 2 2 . . . 
. . . . . 2 8 8 8 8 8 2 . . . . 
. . . . . . 2 8 8 8 2 2 . . . . 
. . . . . . 2 2 2 2 . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, SpriteKind.Food)
        AnimalsHeart.setPosition(Math.randomRange(20, 140), Math.randomRange(20, 100))
        SpaceCadet.say("Level" + Level, 1000)
    }
    info.startCountdown(25)
}
scene.onHitWall(SpriteKind.Player, function (sprite) {
    info.changeLifeBy(-1)
})
sprites.onOverlap(SpriteKind.Player, SpriteKind.Food, function (sprite, otherSprite) {
    Count += 1
    info.changeScoreBy(1)
    info.changeLifeBy(2)
    otherSprite.destroy()
    otherSprite.startEffect(effects.smiles, 200)
    if (Count > 10 + Level) {
        Level += 1
        music.jumpUp.play()
        start_level()
        tiles.setTilemap(tiles.createTilemap(
            hex`1e`,
            img`
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . 2 2 2 2 . . . 2 2 2 . . . . . . . . . . . 
2 2 2 2 2 2 2 2 2 2 . . 2 2 2 2 2 . 2 2 . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . 2 . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . 2 . . . . . . . . . . 
2 2 2 2 2 2 2 2 2 . . 2 . . . . . . . 2 . . . . . . . . . . 
. . . . . . . . . . . 2 2 2 2 . . . . . 2 . . . . . . . . . 
. . . . . . . . . . . . . . 2 . . . . . 2 2 2 2 2 2 2 . . . 
. . . . . . . . . . . . . . 2 . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . 2 2 . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . 2 2 2 2 . 2 2 2 2 2 2 2 2 2 2 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
`,
            [myTiles.tile0,sprites.castle.tilePath4,sprites.castle.tilePath1,sprites.builtin.forestTiles0],
            TileScale.Sixteen
        ))
    } else {
        music.baDing.play()
    }
})
sprites.onOverlap(SpriteKind.Projectile, SpriteKind.Enemy, function (sprite, otherSprite) {
    EvilPoison.destroy(effects.spray, 100)
    Frog_ray.destroy(effects.spray, 100)
    info.changeScoreBy(1)
})
scene.onHitWall(SpriteKind.Enemy, function (sprite) {
    EvilPoison.destroy()
})
controller.A.onEvent(ControllerButtonEvent.Pressed, function () {
    Antidote = sprites.createProjectileFromSprite(img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . f 9 9 9 f 9 9 9 9 f . . 
. . . . 9 9 9 9 9 9 9 9 9 9 2 2 
. . . . 9 9 9 9 9 9 9 9 9 9 . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, SpaceCadet, 200, 0)
})
sprites.onOverlap(SpriteKind.Player, SpriteKind.Enemy, function (sprite, otherSprite) {
    info.changeLifeBy(-1)
})
scene.onOverlapTile(SpriteKind.Player, sprites.dungeon.collectibleRedCrystal, function (sprite, location) {
    if (true) {
        tiles.setTilemap(tiles.createTilemap(
            hex`1e`,
            img`
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . 2 2 2 2 . . . 2 2 2 . . . . . . . . . . . . 
2 2 2 2 2 2 2 2 2 . . 2 2 2 2 2 . 2 2 . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . 2 . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . 2 . . . . . . . . . . . 
2 2 2 2 2 2 2 2 2 . . 2 . . . . . . 2 . . . . . . . . . . . 
. . . . . . . . . . . 2 2 2 2 . . . . 2 . . . . . . . . . . 
. . . . . . . . . . . . . . 2 . . . . 2 2 2 2 2 2 . . . . . 
. . . . . . . . . . . . . . 2 . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . 2 2 . . 2 2 2 . . . . . . . . . 
. . . . . . . . . . . . . . . 2 2 2 2 . 2 2 2 2 2 2 2 2 2 . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
`,
            [myTiles.tile0,sprites.castle.tilePath7,sprites.castle.tilePath1,sprites.dungeon.collectibleRedCrystal,sprites.castle.tileGrass2],
            TileScale.Sixteen
        ))
    }
})
scene.onOverlapTile(SpriteKind.Player, sprites.builtin.forestTiles0, function (sprite, location) {
    game.over(true)
})
scene.onHitWall(SpriteKind.Food, function (sprite) {
    AnimalsHeart.destroy()
})
let Antidote: Sprite = null
let Frog_ray: Sprite = null
let EvilPoison: Sprite = null
let AnimalsHeart: Sprite = null
let Count = 0
let Level = 0
let SpaceCadet: Sprite = null
SpaceCadet = sprites.create(img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. 4 4 8 8 8 . . 5 5 5 5 . . . . 
. 4 4 8 8 8 . 5 5 5 5 5 5 . . . 
4 4 4 8 8 8 . 5 5 5 5 5 5 5 . . 
4 4 4 4 2 2 2 2 2 2 2 2 2 2 . . 
4 4 4 4 2 2 2 2 2 2 2 2 2 2 . . 
4 4 4 4 2 2 2 2 2 2 2 2 2 2 . . 
4 4 4 4 2 2 2 2 2 2 2 2 2 2 . . 
4 4 4 8 8 8 . . . . . . . . . . 
. 4 4 8 8 8 . . . . . . . . . . 
. 4 4 8 8 8 . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, SpriteKind.Player)
tiles.setTilemap(tiles.createTilemap(
            hex`1e000c`,
            img`
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . 2 2 2 2 
2 2 2 2 2 . . . . . . . . . . 2 2 2 2 2 2 2 . . . . . . . . 
. . . . . . . . 2 2 2 . . . 2 2 . . . . . . . . . . . . . . 
. . . . . . . . . . 2 2 2 2 2 . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . 2 2 2 2 2 2 
. . . . . . . . . . . . . . . . . . . . . . . . 2 . . . . . 
2 2 2 2 2 2 2 . . . . . . . . . . . . . . . . 2 2 . . . . . 
. . . . . . 2 . . . . 2 2 2 2 2 2 2 2 2 2 2 2 2 . . . . . . 
. . . . . . 2 2 2 2 2 2 . . . . . . . . . . . . . . . . . . 
`,
            [myTiles.tile0,sprites.dungeon.darkGroundNorthWest0,sprites.dungeon.collectibleRedCrystal,sprites.dungeon.darkGroundNorth],
            TileScale.Sixteen
        ))
SpaceCadet.setPosition(120, 110)
controller.moveSprite(SpaceCadet, 100, 100)
scene.cameraFollowSprite(SpaceCadet)
info.setLife(5)
game.splash("Mission", "Retrieve the stolen gems to our people")
Level = 1
start_level()
game.onUpdateInterval(100, function () {
    EvilPoison = sprites.create(img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . 7 7 7 7 7 7 . . . . 
. . . . 7 7 7 7 7 7 7 7 7 . . . 
. . . 7 7 7 7 7 7 7 7 7 7 7 . . 
. . . 7 7 7 7 7 7 7 7 7 7 7 . . 
. . . 7 7 2 7 7 7 7 2 7 7 7 . . 
. . . . 7 7 7 7 7 7 7 7 7 7 . . 
. . . . 7 7 7 7 2 7 7 7 7 7 . . 
. . . . 7 7 7 2 2 2 7 7 7 7 . . 
. . . . 7 7 7 7 7 2 2 2 7 . . . 
. . . . . 7 7 7 7 7 7 7 . . . . 
. . . . . . 7 7 7 . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, SpriteKind.Enemy)
    EvilPoison.setVelocity(-100, 70)
    EvilPoison.setPosition(200, 100)
})
game.onUpdateInterval(500, function () {
    Frog_ray = sprites.create(img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . 7 7 . . . . . 
. . . . . . . . 7 7 7 7 . . . . 
. . . . 5 5 5 5 7 2 2 7 . . . . 
. . . 5 5 . . . 7 2 2 7 7 . . . 
. . . . . . . 2 7 7 2 7 7 . . . 
. . . . . . 2 2 . 5 5 7 . . . . 
. . . . 2 2 2 . 5 5 . . . . . . 
. . . . . . . . 5 . . . . . . . 
. . . . . . . 5 5 . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, SpriteKind.Enemy)
    Frog_ray.setVelocity(-25, 500)
    Frog_ray.setPosition(400, 30)
})
